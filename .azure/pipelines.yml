trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'

steps:
# Initialize
- task: gitversion/setup@0
  displayName: Setup GitVersion
  inputs:
    versionSpec: '5.x'
- task: gitversion/execute@0
  displayName: Execute GitVersion
  inputs: {}
- script: echo %Action%%BuildVersion%
  displayName: Set build version
  env:
    Action: '##vso[build.updatebuildnumber]'
    BuildVersion: $(GitVersion.SemVer)
# - task: SonarQubePrepare@4
#   condition: eq(variables['Build.SourceBranchName'], 'main')
#   inputs:
#     SonarQube: 'DevFactory_Tutorials_DotNet_SonarQube'
#     scannerMode: 'CLI'
#     configMode: 'manual'
#     cliProjectKey: 'DevFactory_Tutorials_DotNet'
#     cliProjectName: 'DevFactory_Tutorials_DotNet'
#     cliProjectVersion: '$(GitVersion.SemVer)'
#     cliSources: '.'
#     extraProperties: |
#       sonar.cs.vstest.reportsPaths=**/TestOutput.xml
#       sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml

# Build
- script: |
    dotnet build --configuration $(BuildConfiguration)
    dotnet test --configuration $(BuildConfiguration) --no-build --logger:"trx;LogFileName=TestOutput.xml" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
  displayName: Build solution and Run tests

# Publish test results artifacts & code coverage artifacts
- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/TestOutput.xml'
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '**/coverage.cobertura.xml'
  displayName: Publish Code Coverage
# - task: SonarQubeAnalyze@4
#   condition: eq(variables['Build.SourceBranchName'], 'main')
# - task: SonarQubePublish@4
#   condition: eq(variables['Build.SourceBranchName'], 'main')
#   inputs:
#     pollingTimeoutSec: '300'
# - task: WhiteSource Bolt@20
#   inputs:
#     cwd: '$(System.DefaultWorkingDirectory)'
    
# Create package and publish artifact
- script: |
    dotnet pack --configuration $(BuildConfiguration) --no-build src/**/*.csproj -o $(Build.ArtifactStagingDirectory)/ --include-symbols 
  displayName: Create Application Package
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'NugetPackages'
    publishLocation: 'Container'
  displayName: Publish Application Package As Artifact

# Publish
- script: |
    dotnet nuget push $(Build.ArtifactStagingDirectory)/*.nupkg --api-key $(NuGetApiKey) --source https://api.nuget.org/v3/index.json --skip-duplicate
  displayName: Publish Application Package To Nuget
  condition: and(or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/tags/')), eq(variables['GitVersion.PreReleaseLabel'], ''))
